// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  OTHER
  PREFER_NOT_TO_SAY
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  firstName         String
  lastName          String
  displayName       String?
  bio               String?
  birthday          DateTime?
  gender            Gender?
  avatar            Avatar?
  password          String
  posts             Post[]
  comments          Comment[]
  messages          Message[]
  friendRequestTo   Friendship[]  @relation("to")
  friendRequestFrom Friendship[]  @relation("from")
  postLikes         PostLike[]
  commentLikes      CommentLike[]
  follows           Follow[]      @relation("follows")
  followedBy        Follow[]      @relation("followedBy")
}

model Follow {
  id           Int  @id @default(autoincrement())
  followedById Int
  followsId    Int
  followedBy   User @relation("followedBy", fields: [followedById], references: [id])
  follows      User @relation("follows", fields: [followsId], references: [id])

  @@unique([followedById, followsId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friendship {
  id          Int              @id @default(autoincrement())
  requester   User             @relation("to", fields: [requesterId], references: [id])
  requesterId Int
  addressee   User             @relation("from", fields: [addresseeId], references: [id])
  addresseeId Int
  status      FriendshipStatus @default(PENDING)

  @@unique([requesterId, addresseeId])
}

model Post {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String     @db.VarChar(255)
  content   String
  author    User       @relation(fields: [authorId], references: [id])
  authorId  Int
  comments  Comment[]
  likes     PostLike[]
  asset     Asset?
}

model PostLike {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  @@unique([userId, postId])
}

model Comment {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  content         String
  author          User          @relation(fields: [authorId], references: [id])
  authorId        Int
  parentPost      Post?         @relation(fields: [parentPostId], references: [id], onDelete: Cascade)
  parentPostId    Int?
  parentComment   Comment?      @relation("replies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  parentCommentId Int?
  replies         Comment[]     @relation("replies")
  likes           CommentLike[]
}

model CommentLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId Int

  @@unique([userId, commentId])
}

model Message {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  content    String
  chatroom   Chatroom @relation(fields: [chatroomId], references: [id])
  chatroomId Int
}

model Chatroom {
  id       Int       @id @default(autoincrement())
  title    String    @db.VarChar(255)
  messages Message[]
}

model Asset {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int      @unique
  url       String
  publicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Avatar {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  url       String
  publicId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
